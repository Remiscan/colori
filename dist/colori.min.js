const Utils={pad:function(s){return s.length<2?`0${s}`:s},angleToRange:function(angle){let h=angle;while(h<0)h+=360;while(h>360)h-=360;return h},pRound:function(number,precision=5){let x=typeof number==="number"?number:Number(number);return Number(parseFloat(x.toPrecision(precision)))}};const Conversion={srgb_to_lin_srgb:function(rgb){return rgb.map((x=>Math.abs(x)<.04045?x/12.92:(Math.sign(x)||1)*Math.pow((Math.abs(x)+.055)/1.055,2.4)))},lin_srgb_to_srgb:function(rgb){return rgb.map((x=>Math.abs(x)>.0031308?(Math.sign(x)||1)*(1.055*Math.pow(Math.abs(x),1/2.4)-.055):12.92*x))},lin_srgb_to_d65xyz:function(rgb){const[r,g,b]=rgb;return[.41239079926595934*r+.357584339383878*g+.1804807884018343*b,.21263900587151027*r+.715168678767756*g+.07219231536073371*b,.01933081871559182*r+.11919477979462598*g+.9505321522496607*b]},d65xyz_to_lin_srgb:function(xyz){const[x,y,z]=xyz;return[3.2409699419045226*x+-1.537383177570094*y+-.4986107602930034*z,-.9692436362808796*x+1.8759675015077202*y+.04155505740717559*z,.05563007969699366*x+-.20397695888897652*y+1.0569715142428786*z]},srgb_to_hsl:function(rgb){const[r,g,b]=rgb;const max=Math.max(r,g,b);const min=Math.min(r,g,b);const chroma=max-min;const l=(max+min)/2;let h;if(chroma===0)h=0;else switch(max){case r:h=(g-b)/chroma;break;case g:h=(b-r)/chroma+2;break;case b:h=(r-g)/chroma+4;break}h=60*h;while(h<0)h+=360;while(h>360)h-=360;let s;if(l===0||l===1)s=0;else if(l<=.5)s=chroma/(2*l);else s=chroma/(2-2*l);return[h,s,l]},hsl_to_srgb:function(hsl){const[h,s,l]=hsl;const m=s*Math.min(l,1-l);const k=n=>(n+h/30)%12;const f=n=>l-m*Math.max(Math.min(k(n)-3,9-k(n),1),-1);const r=f(0);const g=f(8);const b=f(4);return[r,g,b]},hsl_to_hwb:function(hsl){const[h,s,l]=hsl;let _s;const v=l+s*Math.min(l,1-l);if(v===0)_s=0;else _s=2-2*l/v;const w=(1-_s)*v;const bk=1-v;return[h,w,bk]},hwb_to_hsl:function(hwb){const[h,w,bk]=hwb;let _w=w,_bk=bk;if(w+bk>1){_w=w/(w+bk);_bk=bk/(w+bk)}let _s;const v=1-_bk;if(_bk===1)_s=0;else _s=1-_w/v;let s;const l=v-v*_s/2;if(l===0||l===1)s=0;else s=(v-l)/Math.min(l,1-l);return[h,s,l]},displayp3_to_lin_displayp3:function(rgb){return this.srgb_to_lin_srgb(rgb)},lin_displayp3_to_displayp3:function(rgb){return this.lin_srgb_to_srgb(rgb)},lin_displayp3_to_d65xyz:function(rgb){const[r,g,b]=rgb;return[.4865709486482162*r+.26566769316909306*g+.1982172852343625*b,.2289745640697488*r+.6917385218365064*g+.079286914093745*b,0*r+.04511338185890264*g+1.043944368900976*b]},d65xyz_to_lin_displayp3:function(xyz){const[x,y,z]=xyz;return[2.493496911941425*x+-.9313836179191239*y+-.40271078445071684*z,-.8294889695615747*x+1.7626640603183463*y+.023624685841943577*z,.03584583024378447*x+-.07617238926804182*y+.9568845240076872*z]},prophotorgb_to_lin_prophotorgb:function(rgb){return rgb.map((v=>Math.abs(v)<=16/512?v/16:(Math.sign(v)||1)*Math.pow(v,1.8)))},lin_prophotorgb_to_prophotorgb:function(rgb){return rgb.map((v=>Math.abs(v)>=1/512?(Math.sign(v)||1)*Math.pow(Math.abs(v),1/1.8):16*v))},lin_prophotorgb_to_xyz:function(rgb){const[r,g,b]=rgb;return[.7977604896723027*r+.13518583717574031*g+.0313493495815248*b,.2880711282292934*r+.7118432178101014*g+8565396060525902e-20*b,0*r+0*g+.8251046025104601*b]},xyz_to_lin_prophotorgb:function(xyz){const[x,y,z]=xyz;return[1.3457989731028281*x+-.25558010007997534*y+-.05110628506753401*z,-.5446224939028347*x+1.5082327413132781*y+.02053603239147973*z,0*x+0*y+1.2119675456389454*z]},a98rgb_to_lin_a98rgb:function(rgb){return rgb.map((v=>(Math.sign(v)||1)*Math.pow(Math.abs(v),563/256)))},lin_a98rgb_to_a98rgb:function(rgb){return rgb.map((v=>(Math.sign(v)||1)*Math.pow(Math.abs(v),256/563)))},lin_a98rgb_to_d65xyz:function(rgb){const[r,g,b]=rgb;return[.5766690429101305*r+.1855582379065463*g+.1882286462349947*b,.29734497525053605*r+.6273635662554661*g+.07529145849399788*b,.02703136138641234*r+.07068885253582723*g+.9913375368376388*b]},d65xyz_to_lin_a98rgb:function(xyz){const[x,y,z]=xyz;return[2.0415879038107465*x+-.5650069742788596*y+-.34473135077832956*z,-.9692436362808795*x+1.8759675015077202*y+.04155505740717557*z,.013444280632031142*x+-.11836239223101838*y+1.0151749943912054*z]},rec2020_to_lin_rec2020:function(rgb){const e=1.09929682680944;return rgb.map((v=>Math.abs(v)<.018053968510807*4.5?v/4.5:(Math.sign(v)||1)*Math.pow(Math.abs(v)+e-1,1/.45)))},lin_rec2020_to_rec2020:function(rgb){const e=1.09929682680944;return rgb.map((v=>Math.abs(v)>.018053968510807?(Math.sign(v)||1)*(e*Math.pow(Math.abs(v),.45)-(e-1)):4.5*v))},lin_rec2020_to_d65xyz:function(rgb){const[r,g,b]=rgb;return[.6369580483012914*r+.14461690358620832*g+.1688809751641721*b,.2627002120112671*r+.6779980715188708*g+.05930171646986196*b,0*r+.028072693049087428*g+1.060985057710791*b]},d65xyz_to_lin_rec2020:function(xyz){const[x,y,z]=xyz;return[1.7166511879712674*x+-.35567078377639233*y+-.25336628137365974*z,-.6666843518324892*x+1.6164812366349395*y+.01576854581391113*z,.017639857445310783*x+-.042770613257808524*y+.9421031212354738*z]},xyz_to_lab:function(xyz){const ε=216/24389;const κ=24389/27;const w=[.96422,1,.82521];const[x,y,z]=xyz.map(((v,k)=>v/w[k]));const f=x=>x>ε?Math.cbrt(x):(κ*x+16)/116;const[f0,f1,f2]=[x,y,z].map((v=>f(v)));return[(116*f1-16)/100,500*(f0-f1),200*(f1-f2)]},lab_to_xyz:function(lab){const ε=216/24389;const κ=24389/27;const w=[.96422,1,.82521];let[ciel,ciea,cieb]=lab;ciel=100*ciel;const f1=(ciel+16)/116;const f0=ciea/500+f1;const f2=f1-cieb/200;const x=f0**3>ε?f0**3:(116*f0-16)/κ;const y=ciel>κ*ε?((ciel+16)/116)**3:ciel/κ;const z=f2**3>ε?f2**3:(116*f2-16)/κ;return[x,y,z].map(((v,k)=>v*w[k]))},lab_to_lch:function(lab){const[ciel,ciea,cieb]=lab;const ciec=Math.sqrt(ciea**2+cieb**2);let cieh=Math.atan2(cieb,ciea)*180/Math.PI;while(cieh<0)cieh+=360;while(cieh>360)cieh-=360;return[ciel,ciec,cieh]},lch_to_lab:function(lch){const[ciel,ciec,cieh]=lch;const ciea=ciec*Math.cos(cieh*Math.PI/180);const cieb=ciec*Math.sin(cieh*Math.PI/180);return[ciel,ciea,cieb]},lin_srgb_to_oklab:function(rgb){const[r,g,b]=rgb;let l=.4122214708*r+.5363325363*g+.0514459929*b;let m=.2119034982*r+.6806995451*g+.1073969566*b;let s=.0883024619*r+.2817188376*g+.6299787005*b;l=Math.cbrt(l);m=Math.cbrt(m);s=Math.cbrt(s);const okl=.2104542553*l+.793617785*m+-.0040720468*s;const oka=1.9779984951*l+-2.428592205*m+.4505937099*s;const okb=.0259040371*l+.7827717662*m+-.808675766*s;return[okl,oka,okb]},oklab_to_lin_srgb:function(lab){const[okl,oka,okb]=lab;let l=okl+.3963377774*oka+.2158037573*okb;let m=okl+-.1055613458*oka+-.0638541728*okb;let s=okl+-.0894841775*oka+-1.291485548*okb;l=l**3;m=m**3;s=s**3;const r=4.0767416621*l+-3.3077115913*m+.2309699292*s;const g=-1.2684380046*l+2.6097574011*m+-.3413193965*s;const b=-.0041960863*l+-.7034186147*m+1.707614701*s;return[r,g,b]},oklab_to_oklch:function(lab){return this.lab_to_lch(lab)},oklch_to_oklab:function(lch){return this.lch_to_lab(lch)},d65xyz_to_xyz:function(xyz){const[x,y,z]=xyz;return[1.0479298208405488*x+.022946793341019088*y+-.05019222954313557*z,.029627815688159344*x+.990434484573249*y+-.01707382502938514*z,-.009243058152591178*x+.015055144896577895*y+.7518742899580008*z]},xyz_to_d65xyz:function(xyz){const[x,y,z]=xyz;return[.9554734527042182*x+-.023098536874261423*y+.0632593086610217*z,-.028369706963208136*x+1.0099954580058226*y+.021041398966943008*z,.012314001688319899*x+-.020507696433477912*y+1.3303659366080753*z]}};class GraphNode{constructor(object){this.id=object.id;this.links=object.links;this.visited=false;this.predecessorID=null}visit(){this.visited=true}follow(node){this.predecessorID=node.id}}class Graph{constructor(array){this.nodes=array.map((e=>new GraphNode(e)))}getNode(id){const node=this.nodes.find((node=>node.id===id));if(typeof node==="undefined")throw`Node ${JSON.stringify(id)} does not exist`;return node}shortestPath(startID,endID){if(startID===endID)return[];const start=this.getNode(startID);const end=this.getNode(endID);const queue=[start];start.visit();let found=false;walk:while(queue.length>0){const current=queue.shift();if(current.id===end.id){found=true;break walk}for(const neighbourID of current.links){const neighbour=this.getNode(neighbourID);if(neighbour.visited===false){neighbour.visit();neighbour.follow(current);queue.push(neighbour)}}}if(!found)throw`No path found from ${JSON.stringify(start.id)} to ${JSON.stringify(end.id)}`;const path=[end.id];let current=end;while(current.predecessorID!=null){path.push(current.predecessorID);current=this.getNode(current.predecessorID)}return path.reverse()}}const Contrasts={luminance:function(rgb){const linrgb=Conversion.srgb_to_lin_srgb(rgb);return.2126729*linrgb[0]+.7151522*linrgb[1]+.072175*linrgb[2]},WCAG2:function(rgbText,rgbBack){const L1=this.luminance(rgbText);const L2=this.luminance(rgbBack);return(Math.max(L1,L2)+.05)/(Math.min(L1,L2)+.05)},APCA:function(rgbText,rgbBack){const coeffs=[.2126729,.7151522,.072175];const gamma=2.4;const luminance=rgb=>rgb.reduce(((sum,v,i)=>sum+Math.pow(v,gamma)*coeffs[i]),0);let[Ltext,Lback]=[rgbText,rgbBack].map((rgb=>luminance(rgb)));const blackClampTrigger=.03;const blackClampPow=1.45;[Ltext,Lback]=[Ltext,Lback].map((L=>L>blackClampTrigger?L:L+Math.pow(blackClampTrigger-L,blackClampPow)));const δLmin=5e-4;if(Math.abs(Ltext-Lback)<δLmin)return 0;let result;const scale=1.25;const compute=(Lback,Ltext,powBack,powText)=>(Math.pow(Lback,powBack)-Math.pow(Ltext,powText))*scale;const lowClip=.001,lowTrigger=.078,lowOffset=.06,invLowTrigger=12.82051282051282;if(Lback>Ltext){const powBack=.55,powText=.58;const SAPC=compute(Lback,Ltext,powBack,powText);result=SAPC<lowClip?0:SAPC<lowTrigger?SAPC*(1-lowOffset*invLowTrigger):SAPC-lowOffset}else{const powBack=.62,powText=.57;const SAPC=compute(Lback,Ltext,powBack,powText);result=SAPC>-lowClip?0:SAPC>-lowTrigger?SAPC*(1-lowOffset*invLowTrigger):SAPC+lowOffset}return result*100}};const Distances={CIEDE2000:function([l1,a1,b1],[l2,a2,b2]){const L1=100*l1,L2=100*l2;const C1=Math.sqrt(a1**2+b1**2);const C2=Math.sqrt(a2**2+b2**2);const mC=(C1+C2)/2,G=.5*(1-Math.sqrt(mC**7/(mC**7+25**7))),aa1=(1+G)*a1,aa2=(1+G)*a2,CC1=Math.sqrt(aa1**2+b1**2),CC2=Math.sqrt(aa2**2+b2**2);let hh1=CC1===0?0:Math.atan2(b1,aa1)*180/Math.PI,hh2=CC2===0?0:Math.atan2(b2,aa2)*180/Math.PI;while(hh1<0)hh1+=360;while(hh1>360)hh1-=360;while(hh2<0)hh2+=360;while(hh2>360)hh2-=360;const dL=L2-L1,dC=CC2-CC1;const dhh=CC1*CC2===0?0:Math.abs(hh2-hh1)<=180?hh2-hh1:hh2-hh1>180?hh2-hh1-360:hh2-hh1+360;const dH=2*Math.sqrt(CC1*CC2)*Math.sin(Math.PI/180*(dhh/2));const mL=(L1+L2)/2,mCC=(CC1+CC2)/2;const mhh=CC1*CC2===0?hh1+hh2:Math.abs(hh2-hh1)<=180?(hh1+hh2)/2:hh1+hh2>=360?(hh1+hh2-360)/2:(hh1+hh2+360)/2;const T=1-.17*Math.cos(Math.PI/180*(mhh-30))+.24*Math.cos(Math.PI/180*(2*mhh))+.32*Math.cos(Math.PI/180*(3*mhh+6))-.2*Math.cos(Math.PI/180*(4*mhh-63)),dTH=30*Math.exp(-1*((mhh-275)/25)**2),RC=2*Math.sqrt(mCC**7/(mCC**7+25**7)),SL=1+.015*(mL-50)**2/Math.sqrt(20+(mL-50)**2),SC=1+.045*mCC,SH=1+.015*mCC*T,RT=-1*Math.sin(Math.PI/180*(2*dTH))*RC;return Math.sqrt((dL/SL)**2+(dC/SC)**2+(dH/SH)**2+RT*(dC/SC)*(dH/SH))}};const oklabGamut={maxSaturation:function(a,b){let k0,k1,k2,k3,k4,wl,wm,ws;if(-1.88170328*a-.80936493*b>1){k0=1.19086277;k1=1.76576728;k2=.59662641;k3=.75515197;k4=.56771245;wl=4.0767416621;wm=-3.3077115913;ws=.2309699292}else if(1.81444104*a-1.19445276*b>1){k0=.73956515;k1=-.45954404;k2=.08285427;k3=.1254107;k4=.14503204;wl=-1.2684380046;wm=2.6097574011;ws=-.3413193965}else{k0=1.35733652;k1=-.00915799;k2=-1.1513021;k3=-.50559606;k4=.00692167;wl=-.0041960863;wm=-.7034186147;ws=+1.707614701}let S=k0+k1*a+k2*b+k3*a*a+k4*a*b;const k_l=.3963377774*a+.2158037573*b;const k_m=-.1055613458*a-.0638541728*b;const k_s=-.0894841775*a-1.291485548*b;const[l_,m_,s_]=[k_l,k_m,k_s].map((v=>1+S*v));const[l,m,s]=[l_,m_,s_].map((v=>v**3));const l_dS=3*k_l*l_*l_,m_dS=3*k_m*m_*m_,s_dS=3*k_s*s_*s_;const l_dS2=6*k_l*k_l*l_,m_dS2=6*k_m*k_m*m_,s_dS2=6*k_s*k_s*s_;const f=wl*l+wm*m+ws*s,f1=wl*l_dS+wm*m_dS+ws*s_dS,f2=wl*l_dS2+wm*m_dS2+ws*s_dS2;S=S-f*f1/(f1*f1-.5*f*f2);return S},cusp:function(a,b){const Scusp=this.maxSaturation(a,b);const rgbMax=Conversion.oklab_to_lin_srgb([1,Scusp*a,Scusp*b]);const Lcusp=Math.cbrt(1/Math.max(...rgbMax));const Ccusp=Lcusp*Scusp;return[Lcusp,Ccusp]},gamutIntersection:function(a,b,L1,C1,L0){const[Lcusp,Ccusp]=this.cusp(a,b);let t;if((L1-L0)*Ccusp-(Lcusp-L0)*C1<=0){t=Ccusp*L0/(C1*Lcusp+Ccusp*(L0-L1))}else{t=Ccusp*(L0-1)/(C1*(Lcusp-1)+Ccusp*(L0-L1));const dL=L1-L0,dC=C1;const k_l=.3963377774*a+.2158037573*b,k_m=-.1055613458*a-.0638541728*b,k_s=-.0894841775*a-1.291485548*b;const[l_dt,m_dt,s_dt]=[k_l,k_m,k_s].map((v=>dL+dC*v));for(let i=0;i<2;i++){const L=L0*(1-t)+t*L1;const C=t*C1;const[l_,m_,s_]=[k_l,k_m,k_s].map((v=>L+C*v));const[l,m,s]=[l_,m_,s_].map((v=>v**3));const ldt=3*l_dt*l_*l_,mdt=3*m_dt*m_*m_,sdt=3*s_dt*s_*s_;const ldt2=6*l_dt*l_dt*l_,mdt2=6*m_dt*m_dt*m_,sdt2=6*s_dt*s_dt*s_;const term=(v1,v2,v3)=>{const w=v1*l+v2*m+v3*s-1,w1=v1*ldt+v2*mdt+v3*sdt,w2=v1*ldt2+v2*mdt2+v3*sdt2;const u=w1/(w1*w1-.5*w*w2);const t=u>=0?-w*u:Number.MAX_VALUE;return t};const t_r=term(4.0767416621,-3.3077115913,.2309699292);const t_g=term(-1.2684380046,2.6097574011,-.3413193965);const t_b=term(-.0041960863,-.7034186147,1.707614701);t+=Math.min(t_r,t_g,t_b)}}return t},clip:function(rgb){if(rgb.every((v=>v>0&&v<1)))return rgb;const[okl,oka,okb]=Conversion.lin_srgb_to_oklab(Conversion.srgb_to_lin_srgb(rgb));const[x,okc,okh]=Conversion.oklab_to_oklch([okl,oka,okb]);const τ=1e-5;const α=.05;const C=Math.max(τ,okc);const a=oka/C,b=okb/C;const Ld=okl-.5;const e1=.5+Math.abs(Ld)+α*C;const L0=.5*(1+Math.sign(Ld)*(e1-Math.sqrt(e1*e1-2*Math.abs(Ld))));const t=this.gamutIntersection(a,b,okl,C,L0);const Lclipped=L0*(1-t)+t*okl;const Cclipped=t*C;const clampedValues=Conversion.lin_srgb_to_srgb(Conversion.oklab_to_lin_srgb([Lclipped,Cclipped*a,Cclipped*b]));return clampedValues}};const colorSpaces=[{id:"srgb",whitepoint:"d65",CSSformat:"rgb",gamut:[[0,1],[0,1],[0,1]],links:["lin_srgb","hsl"]},{id:"lin_srgb",links:["srgb","d65xyz","oklab"]},{id:"hsl",whitepoint:"d65",CSSformat:"hsl",gamut:[[0,360],[0,1],[0,1]],links:["srgb","hwb"]},{id:"hwb",whitepoint:"d65",CSSformat:"hwb",gamut:[[0,360],[0,1],[0,1]],links:["hsl"]},{id:"lab",whitepoint:"d50",CSSformat:"lab",gamut:[[0,4],[-Infinity,Infinity],[-Infinity,Infinity]],links:["xyz","lch"]},{id:"lch",whitepoint:"d50",CSSformat:"lch",gamut:[[0,4],[0,+Infinity],[0,360]],links:["lab"]},{id:"xyz",whitepoint:"d50",CSSformat:"color",gamut:[[-Infinity,+Infinity],[-Infinity,+Infinity],[-Infinity,+Infinity]],links:["lab","d65xyz","lin_prophoto-rgb"]},{id:"d65xyz",whitepoint:"d65",links:["xyz","lin_srgb","lin_display-p3","lin_a98-rgb","lin_rec2020"]},{id:"display-p3",whitepoint:"d65",CSSformat:"color",gamut:[[0,1],[0,1],[0,1]],links:["lin_display-p3"]},{id:"lin_display-p3",links:["display-p3","d65xyz"]},{id:"a98-rgb",whitepoint:"d65",CSSformat:"color",gamut:[[0,1],[0,1],[0,1]],links:["lin_a98-rgb"]},{id:"lin_a98-rgb",links:["a98-rgb","d65xyz"]},{id:"prophoto-rgb",whitepoint:"d50",CSSformat:"color",gamut:[[0,1],[0,1],[0,1]],links:["lin_prophoto-rgb"]},{id:"lin_prophoto-rgb",links:["prophoto-rgb","xyz"]},{id:"rec2020",whitepoint:"d65",CSSformat:"color",gamut:[[0,1],[0,1],[0,1]],links:["lin_rec2020"]},{id:"lin_rec2020",links:["rec2020","d65xyz"]},{id:"oklab",whitepoint:"d65",gamut:[[0,4],[-Infinity,Infinity],[-Infinity,Infinity]],links:["lin_srgb","oklch"]},{id:"oklch",whitepoint:"d65",gamut:[[0,4],[0,+Infinity],[0,360]],links:["oklab"]}];const namedColors={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgrey:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",grey:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"778899",lightslategrey:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};const numberExp="(?:\\-|\\+)?(?:[0-9]+(?:\\.[0-9]+)?|\\.[0-9]+)(?:(?:e|E)(?:\\-|\\+)?[0-9]+)?";const RegExps={number:numberExp,percentage:numberExp+"%",numberOrPercentage:numberExp+"%?",angle:numberExp+"(?:deg|grad|rad|turn)?"};const CSSformats=[{id:"hex",syntaxes:[/^#([a-fA-F0-9]{1})([a-fA-F0-9]{1})([a-fA-F0-9]{1})$/,/^#([a-fA-F0-9]{1})([a-fA-F0-9]{1})([a-fA-F0-9]{1})([a-fA-F0-9]{1})$/,/^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/,/^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/]},{id:"rgb",syntaxes:[new RegExp(`^rgba?\\((${RegExps.number}), ?(${RegExps.number}), ?(${RegExps.number})\\)$`),new RegExp(`^rgba?\\((${RegExps.number}), ?(${RegExps.number}), ?(${RegExps.number}), ?(${RegExps.numberOrPercentage})\\)$`),new RegExp(`^rgba?\\((${RegExps.percentage}), ?(${RegExps.percentage}), ?(${RegExps.percentage})\\)$`),new RegExp(`^rgba?\\((${RegExps.percentage}), ?(${RegExps.percentage}), ?(${RegExps.percentage}), ?(${RegExps.numberOrPercentage})\\)$`),new RegExp(`^rgba?\\((${RegExps.number}) (${RegExps.number}) (${RegExps.number})\\)$`),new RegExp(`^rgba?\\((${RegExps.number}) (${RegExps.number}) (${RegExps.number}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`),new RegExp(`^rgba?\\((${RegExps.percentage}) (${RegExps.percentage}) (${RegExps.percentage})\\)$`),new RegExp(`^rgba?\\((${RegExps.percentage}) (${RegExps.percentage}) (${RegExps.percentage}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`)]},{id:"hsl",syntaxes:[new RegExp(`^hsla?\\((${RegExps.angle}), ?(${RegExps.percentage}), ?(${RegExps.percentage})\\)$`),new RegExp(`^hsla?\\((${RegExps.angle}), ?(${RegExps.percentage}), ?(${RegExps.percentage}), ?(${RegExps.numberOrPercentage})\\)$`),new RegExp(`^hsla?\\((${RegExps.angle}) (${RegExps.percentage}) (${RegExps.percentage})\\)$`),new RegExp(`^hsla?\\((${RegExps.angle}) (${RegExps.percentage}) (${RegExps.percentage}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`)]},{id:"hwb",syntaxes:[new RegExp(`^hwb\\((${RegExps.angle}) (${RegExps.percentage}) (${RegExps.percentage})\\)$`),new RegExp(`^hwb\\((${RegExps.angle}) (${RegExps.percentage}) (${RegExps.percentage}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`)]},{id:"lab",syntaxes:[new RegExp(`^lab\\((${RegExps.percentage}) (${RegExps.number}) (${RegExps.number})\\)$`),new RegExp(`^lab\\((${RegExps.percentage}) (${RegExps.number}) (${RegExps.number}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`)]},{id:"lch",syntaxes:[new RegExp(`^lch\\((${RegExps.percentage}) (${RegExps.number}) (${RegExps.angle})\\)$`),new RegExp(`^lch\\((${RegExps.percentage}) (${RegExps.number}) (${RegExps.angle}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`)]},{id:"color",syntaxes:[new RegExp(`^color\\(([a-zA-Z0-9_-]+?) (${RegExps.number}) (${RegExps.number}) (${RegExps.number})\\)$`),new RegExp(`^color\\(([a-zA-Z0-9_-]+?) (${RegExps.number}) (${RegExps.number}) (${RegExps.number}) ?\\/ ?(${RegExps.numberOrPercentage})\\)$`)]},{id:"name",syntaxes:[/^[A-Za-z]+$/]}];class Couleur{constructor(color){this.r=null;this.g=null;this.b=null;this.a=null;const isAlpha=(val,def=1)=>!!val?val:val===0?0:def;if(color instanceof Couleur){this.r=color.r;this.g=color.g;this.b=color.b;this.a=color.a}else if(Array.isArray(color)&&(color.length==3||color.length==4)){[this.r,this.g,this.b]=Couleur.toGamut("srgb",color.slice(0,3),"srgb",{method:"naive"});this.a=Math.max(0,Math.min(isAlpha(color[3]),1))}else if(typeof color==="string"){const format=Couleur.matchSyntax(color.trim());switch(format.id){case"hex":this.hex=[format.data[1],format.data[2],format.data[3],isAlpha(format.data[4],"ff")];break;case"rgb":this.rgb=[format.data[1],format.data[2],format.data[3],isAlpha(format.data[4])];break;case"hsl":this.hsl=[format.data[1],format.data[2],format.data[3],isAlpha(format.data[4])];break;case"hwb":this.hwb=[format.data[1],format.data[2],format.data[3],isAlpha(format.data[4])];break;case"lab":this.lab=[format.data[1],format.data[2],format.data[3],isAlpha(format.data[4])];break;case"lch":this.lch=[format.data[1],format.data[2],format.data[3],isAlpha(format.data[4])];break;case"color":this.setColor(format.data[1],[format.data[2],format.data[3],format.data[4],isAlpha(format.data[5])]);break;default:throw`${JSON.stringify(color)} is not a valid color format`}}else throw`Couleur objects can only be created from a string, an array of parsed values, or another Couleur object ; this is not one: ${JSON.stringify(color)}`}static makeInstance(color){if(color instanceof Couleur)return color;else return new Couleur(color)}static matchSyntax(colorString){const tri=colorString.slice(0,3);let format;if(tri.slice(0,1)==="#")format=CSSformats[0];else switch(tri){case"rgb":format=CSSformats[1];break;case"hsl":format=CSSformats[2];break;case"hwb":format=CSSformats[3];break;case"lab":format=CSSformats[4];break;case"lch":format=CSSformats[5];break;case"col":format=CSSformats[6];break;default:format=CSSformats[7]}for(const syntaxe of format.syntaxes){const result=colorString.match(syntaxe);if(result!=null&&result[0]===colorString){if(format.id==="name"){if(colorString==="transparent")return{id:"rgb",data:[null,0,0,0,0]};const allNames=Couleur.couleursNommees;const name=colorString.toLowerCase();if(name in allNames)return Couleur.matchSyntax("#"+allNames[name])}return{id:format.id,data:result}}}throw`${JSON.stringify(colorString)} is not a valid color format`}static parse(value,prop=null,{clamp:clamp=true}={}){if(prop==="a"){if(new RegExp("^"+RegExps.percentage+"$").test(value)){if(clamp)return Math.max(0,Math.min(parseFloat(value)/100,1));else return parseFloat(value)/100}else if(new RegExp("^"+RegExps.number+"$").test(value)){if(clamp)return Math.max(0,Math.min(value,1));else return parseFloat(value)}else throw`Invalid ${JSON.stringify(prop)} value: ${JSON.stringify(value)}`}else if(["r","g","b"].includes(prop)){if(new RegExp("^"+RegExps.percentage+"$").test(value)){if(clamp)return Math.max(0,Math.min(parseFloat(value)/100,1));else return parseFloat(value)/100}else if(new RegExp("^"+RegExps.number+"$").test(value)){if(clamp)return Math.max(0,Math.min(value/255,1));else return value/255}else throw`Invalid ${JSON.stringify(prop)} value: ${JSON.stringify(value)}`}else if(["h","cieh"].includes(prop)){let h=parseFloat(value);if(new RegExp("^"+RegExps.number+"$").test(value)){return Utils.angleToRange(h)}if(new RegExp("^"+RegExps.angle+"$").test(value)){if(String(value).slice(-3)==="deg");else if(String(value).slice(-4)==="grad")h=h*360/400;else if(String(value).slice(-3)==="rad")h=h*180/Math.PI;else if(String(value).slice(-4)==="turn")h=h*360;else throw`Invalid angle value: ${JSON.stringify(value)}`;return Utils.angleToRange(h)}else throw`Invalid ${JSON.stringify(prop)} value: ${JSON.stringify(value)}`}else if(["s","l","w","bk","ciel"].includes(prop)){if(new RegExp("^"+RegExps.percentage+"$").test(value)){if(clamp)return Math.max(0,Math.min(parseFloat(value)/100,1));else return parseFloat(value)/100}else throw`Invalid ${JSON.stringify(prop)} value: ${JSON.stringify(value)}`}else if(["ciea","cieb"].includes(prop)){if(new RegExp("^"+RegExps.number+"$").test(value)){return parseFloat(value)}else throw`Invalid ${JSON.stringify(prop)} value: ${JSON.stringify(value)}`}else if(prop==="ciec"){if(new RegExp("^"+RegExps.number+"$").test(value)){if(clamp)return Math.max(0,value);else return parseFloat(value)}else throw`Invalid ${JSON.stringify(prop)} value: ${JSON.stringify(value)}`}else{if(new RegExp("^"+RegExps.percentage+"$").test(value)){return parseFloat(value)/100}else if(new RegExp("^"+RegExps.number+"$").test(value)){return parseFloat(value)}else throw`Invalid arbitrary value: ${JSON.stringify(value)}`}}static unparse(value,prop,{precision:precision=0}={}){switch(prop){case"r":case"g":case"b":return precision===null?`${255*value}`:`${Math.round(10**precision*255*value)/10**precision}`;case"s":case"l":case"w":case"bk":case"ciel":return precision===null?`${100*value}%`:`${Math.round(10**precision*100*value)/10**precision}%`;case"a":return precision===null?`${value}`:`${Math.round(10**Math.max(precision,2)*value)/10**Math.max(precision,2)}`;default:return precision===null?`${value}`:`${Math.round(10**precision*value)/10**precision}`}}set(data,props,spaceID){const space=Couleur.getSpace(spaceID);const values=props.map(((p,i)=>Couleur.parse(data[i],p)));[this.r,this.g,this.b]=Couleur.convert(space,"srgb",values);const isAlpha=(val,def=1)=>!!val?val:val===0?0:def;this.a=Couleur.parse(isAlpha(data[3]),"a")}expr(format,{precision:precision=0,clamp:clamp=true}={}){const spaceID=typeof format==="string"?format.replace("color-",""):format;const space=Couleur.getSpace(spaceID);let values=this.valuesTo(space);if(clamp)values=Couleur.toGamut(space,values,space);const a=Couleur.unparse(this.a,"a",{precision:precision});values=[...values,a];if(format.slice(0,5)==="color"){let string=`color(${space.id}`;for(const[k,v]of Object.entries(values)){if(Number(k)===values.length-1){if(a>=1)break;string+=` / ${a}`}else{string+=` ${precision===null?v:Math.round(10**precision*v)/10**precision}`}}string+=`)`;return string}const props=Couleur.propertiesOf(format);const[x,y,z]=props.map(((p,k)=>Couleur.unparse(values[k],p,{precision:precision})));switch(format){case"rgb":case"rgba":case"hsl":case"hsla":{if(format.length>3&&format.slice(-1)==="a"||a<1)return`${format}(${x}, ${y}, ${z}, ${a})`;else return`${format}(${x}, ${y}, ${z})`}default:{if(a<1)return`${format}(${x} ${y} ${z} / ${a})`;else return`${format}(${x} ${y} ${z})`}}}static makeExpr(format,values,valueSpaceID,options){const spaceID=typeof format==="string"?format.replace("color-",""):format;const rgba=[...Couleur.convert(valueSpaceID,spaceID,values.slice(0,3)),values[3]];return new Couleur(rgba).expr(format,options)}get values(){return[this.r,this.g,this.b]}get name(){if(this.a===1){const allNames=Couleur.couleursNommees;const[r,g,b]=[255*this.r,255*this.g,255*this.b];const tolerance=255*.02;for(const[name,hex]of Object.entries(allNames)){const[r2,g2,b2]=[parseInt(`${hex[0]}${hex[1]}`,16),parseInt(`${hex[2]}${hex[3]}`,16),parseInt(`${hex[4]}${hex[5]}`,16)];if(Math.abs(r2-r)+Math.abs(g2-g)+Math.abs(b2-b)<tolerance)return name}return null}else if(this.a===0)return"transparent";else return null}get exactName(){if(this.a===1){const allNames=Couleur.couleursNommees;const hex6=this.hex.slice(1);for(const[name,hex]of Object.entries(allNames)){if(hex===hex6)return name}return null}else if(this.a===0)return"transparent";else return null}set hex(hexa){let r,g,b,a;r=hexa[0];r=r.length===1?r.repeat(2):r;r=parseInt(r,16);g=hexa[1];g=g.length===1?g.repeat(2):g;g=parseInt(g,16);b=hexa[2];b=b.length===1?b.repeat(2):b;b=parseInt(b,16);a=hexa[3]||"ff";a=a.length===1?a.repeat(2):a;a=parseInt(a,16)/255;this.rgb=[r,g,b,a]}set hexa(hexa){this.hex=hexa}get hex(){const values=Couleur.toGamut("srgb",this.values);const rgb=[...values,this.a].map((v=>Utils.pad(Math.round(v*255).toString(16))));if(this.a<1)return`#${rgb[0]}${rgb[1]}${rgb[2]}${rgb[3]}`;else return`#${rgb[0]}${rgb[1]}${rgb[2]}`}set rgb(rgba){this.set(rgba,["r","g","b"],"srgb")}set rgba(rgba){this.rgb=rgba}get rgb(){return this.expr("rgb",{precision:2})}get rgba(){return this.rgb}set hsl(hsla){this.set(hsla,["h","s","l"],"hsl")}set hsla(hsla){this.hsl=hsla}get hsl(){return this.expr("hsl",{precision:2})}get hsla(){return this.hsl}set hwb(hwba){this.set(hwba,["h","w","bk"],"hwb")}get hwb(){return this.expr("hwb",{precision:2})}set lab(laba){this.set(laba,["ciel","ciea","cieb"],"lab")}get lab(){return this.expr("lab",{precision:2})}set lch(lcha){this.set(lcha,["ciel","ciec","cieh"],"lch")}get lch(){return this.expr("lch",{precision:2})}setColor(spaceID,rgba){let rgb=rgba.slice(0,3).map((v=>Couleur.parse(v)));const a=Couleur.parse(rgba[3]);switch(spaceID){case"srgb":case"display-p3":case"a98-rgb":case"prophoto-rgb":case"rec2020":case"xyz":rgb=Couleur.convert(spaceID,"srgb",rgb);break;default:if(spaceID.startsWith("--")){const id=spaceID.substring(2);rgb=Couleur.convert(id,"srgb",rgb)}else throw`The ${JSON.stringify(spaceID)} color space is not supported`}const values=[...rgb,a];return this.set(values,[null,null,null],"srgb")}set h(val){const[x,s,l]=this.valuesTo("hsl");const props=[...Couleur.propertiesOf("hsl"),"a"];this.hsl=[val,s,l,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set hue(val){this.h=val}set s(val){const[h,x,l]=this.valuesTo("hsl");const props=[...Couleur.propertiesOf("hsl"),"a"];this.hsl=[h,val,l,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set saturation(val){this.s=val}set l(val){const[h,s,x]=this.valuesTo("hsl");const props=[...Couleur.propertiesOf("hsl"),"a"];this.hsl=[h,s,val,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set lightness(val){this.l=val}set w(val){const[h,x,bk]=this.valuesTo("hwb");const props=[...Couleur.propertiesOf("hwb"),"a"];this.hwb=[h,val,bk,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set whiteness(val){this.w=val}set bk(val){const[h,w,x]=this.valuesTo("hwb");const props=[...Couleur.propertiesOf("hwb"),"a"];this.hwb=[h,w,val,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set blackness(val){this.bk=val}set ciel(val){const[x,ciea,cieb]=this.valuesTo("lab");const props=[...Couleur.propertiesOf("lch"),"a"];this.lab=[val,ciea,cieb,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set CIElightness(val){this.ciel=val}set ciea(val){const[ciel,x,cieb]=this.valuesTo("lab");const props=[...Couleur.propertiesOf("lab"),"a"];this.lab=[ciel,val,cieb,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set cieb(val){const[ciel,ciea,x]=this.valuesTo("lab");const props=[...Couleur.propertiesOf("lab"),"a"];this.lab=[ciel,ciea,val,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set ciec(val){const[ciel,x,cieh]=this.valuesTo("lch");const props=[...Couleur.propertiesOf("lch"),"a"];this.lch=[ciel,val,cieh,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set CIEchroma(val){this.ciec=val}set cieh(val){const[ciel,ciec,x]=this.valuesTo("lch");const props=[...Couleur.propertiesOf("lch"),"a"];this.lch=[ciel,ciec,val,this.a].map(((v,k)=>Couleur.unparse(v,props[k])))}set CIEhue(val){this.cieh=val}get red(){return this.r}get green(){return this.g}get blue(){return this.b}get alpha(){return this.a}get opacity(){return this.a}get h(){return this.valuesTo("hsl")[0]}get hue(){return this.h}get s(){return this.valuesTo("hsl")[1]}get saturation(){return this.s}get l(){return this.valuesTo("hsl")[2]}get lightness(){return this.l}get w(){return this.valuesTo("hwb")[1]}get whiteness(){return this.w}get bk(){return this.valuesTo("hwb")[2]}get whiteness(){return this.w}get ciel(){return this.valuesTo("lab")[0]}get CIElightness(){return this.ciel}get ciea(){return this.valuesTo("lab")[1]}get cieb(){return this.valuesTo("lab")[2]}get ciec(){return this.valuesTo("lch")[1]}get CIEchroma(){return this.ciec}get cieh(){return this.valuesTo("lch")[2]}get CIEhue(){return this.cieh}get luminance(){if(this.a<1)throw`The luminance of a transparent color would be meaningless`;return Contrasts.luminance(this.values)}static convert(startSpaceID,endSpaceID,values){if((startSpaceID.id||startSpaceID)===(endSpaceID.id||endSpaceID))return values;const startSpace=Couleur.getSpace(startSpaceID);const endSpace=Couleur.getSpace(endSpaceID);let path;const graph=new Graph(Couleur.colorSpaces);try{path=graph.shortestPath(startSpace.id,endSpace.id)}catch(error){switch(error){case`Node ${startSpace.id} does not exist`:throw`${JSON.stringify(startSpace.id)} is not a supported color space`;case`Node ${endSpace.id} does not exist`:throw`${JSON.stringify(endSpace.id)} is not a supported color space`;case`No path found from ${startSpace.id} to ${endSpace.id}`:throw`Conversion from ${JSON.stringify(startSpace.id)} space to ${JSON.stringify(endSpace.id)} space is impossible`;default:throw error}}let result=values;while(path.length>1){const start=path.shift();const end=path[0];const functionName=`${start}_to_${end}`.replace(/-/g,"");if(!Conversion[functionName])console.log(functionName);result=Conversion[functionName](result)}return result}valuesTo(spaceID,{clamp:clamp=false}={}){const space=Couleur.getSpace(spaceID);let values=Couleur.convert("srgb",space,this.values);if(clamp)values=Couleur.toGamut(space,values);return values}static inGamut(spaceID,values,valueSpaceID="srgb",{tolerance:tolerance=1e-4}={}){const space=Couleur.getSpace(spaceID);const convertedValues=Couleur.convert(valueSpaceID,space,values);return convertedValues.every(((v,k)=>v>=space.gamut[k][0]-tolerance&&v<=space.gamut[k][1]+tolerance))}inGamut(spaceID,options){return Couleur.inGamut(spaceID,this.values,"srgb",options)}static toGamut(spaceID,values,valueSpaceID="srgb",{method:method="oklab"}={}){const space=Couleur.getSpace(spaceID);const valueSpace=Couleur.getSpace(valueSpaceID);if(Couleur.inGamut(space,values,valueSpace,{tolerance:0}))return values;let clampedValues,clampSpace;if(method==="naive"){clampSpace=space;const convertedValues=Couleur.convert(valueSpace,clampSpace,values);clampedValues=convertedValues.map(((v,k)=>Math.max(space.gamut[k][0],Math.min(v,space.gamut[k][1]))))}else if(method==="oklab"){clampSpace=Couleur.getSpace("srgb");const rgb=Couleur.convert(valueSpace,clampSpace,values);clampedValues=oklabGamut.clip(rgb)}else if(method==="chroma"){clampSpace=Couleur.getSpace("lch");let lch=Couleur.convert(valueSpace,clampSpace,values);const τ=.01;let Cmin=0;let Cmax=lch[1];lch[1]=lch[1]/2;while(Cmax-Cmin>τ){const naive=Couleur.toGamut(space,lch,clampSpace,{method:"naive"});if(Couleur.distance(naive,lch,{method:"CIEDE2000"})<2+τ)Cmin=lch[1];else Cmax=lch[1];lch[1]=(Cmin+Cmax)/2}clampedValues=lch}if(method!=="naive")clampedValues=Couleur.toGamut(space,clampedValues,clampSpace,{method:"naive"});return Couleur.convert(clampSpace,valueSpace,clampedValues)}toGamut(spaceID){return Couleur.toGamut(spaceID,this.values,"srgb")}change(prop,value,{action:action=null}={}){const replace=action==="replace";const scale=action==="scale";const val=scale?Couleur.parse(value):Couleur.parse(value,prop,{clamp:false});const changedColor=new Couleur(this);const oldVal=this[prop];const newVal=replace?val:scale?oldVal*val:oldVal+val;changedColor[prop]=newVal;return changedColor}replace(prop,value){return this.change(prop,value,{action:"replace"})}scale(prop,value){return this.change(prop,value,{action:"scale"})}complement(){return this.change("h",180)}negative(){return new Couleur(`rgb(${255*(1-this.r)}, ${255*(1-this.g)}, ${255*(1-this.b)}, ${this.a})`)}invert(){return this.negative()}greyscale(){const L=255*this.replace("a",1).luminance;return new Couleur(`rgb(${L}, ${L}, ${L}, ${this.a})`)}grayscale(){return this.greyscale()}sepia(){const r=Math.min(.393*this.r+.769*this.g+.189*this.b,1);const g=Math.min(.349*this.r+.686*this.g+.168*this.b,1);const b=Math.min(.272*this.r+.534*this.g+.131*this.b,1);return new Couleur(`rgb(${255*r}, ${255*g}, ${255*b}, ${this.a})`)}static blend(backgroundColor,overlayColor,alpha){const background=Couleur.makeInstance(backgroundColor);const overlay=Couleur.makeInstance(overlayColor);if(alpha!=null)overlay.a=Couleur.parse(alpha,"a");if(overlay.a===0)return background;else if(overlay.a===1)return overlay;const a=overlay.a+background.a*(1-overlay.a);const r=(overlay.r*overlay.a+background.r*background.a*(1-overlay.a))/a;const g=(overlay.g*overlay.a+background.g*background.a*(1-overlay.a))/a;const b=(overlay.b*overlay.a+background.b*background.a*(1-overlay.a))/a;return new Couleur([r,g,b,a])}static blendAll(...colors){if(colors.length<2)throw`You need at least 2 colors to blend`;const background=colors.shift();const overlay=colors.shift();const mix=Couleur.blend(background,overlay);if(colors.length===0)return mix;else return Couleur.blendAll(mix,...colors)}blend(overlayColor,alpha){return Couleur.blend(this,overlayColor,alpha)}blendAll(...colors){return Couleur.blendAll(this,...colors)}static unblend(mixColor,overlayColor,alpha){const mix=Couleur.makeInstance(mixColor);const overlay=Couleur.makeInstance(overlayColor);if(alpha!=null)overlay.a=Couleur.parse(alpha,"a");if(overlay.a===1){throw`Overlay color ${JSON.stringify(overlay.rgb)} isn't transparent, so the background it was blended onto could have been any color`}else if(overlay.a===0)return mix;else{if(mix.a<overlay.a)return null;else if(mix.a===overlay.a){if(Couleur.same(mix,overlay))return new Couleur([0,0,0,0]);else return null}else{const a=(mix.a-overlay.a)/(1-overlay.a);const r=(mix.r*mix.a-overlay.r*overlay.a)/(a*(1-overlay.a));const g=(mix.g*mix.a-overlay.g*overlay.a)/(a*(1-overlay.a));const b=(mix.b*mix.a-overlay.b*overlay.a)/(a*(1-overlay.a));if(!Couleur.inGamut("srgb",[r,g,b],"srgb",{tolerance:1/255}))return null;const clampedValues=Couleur.toGamut("srgb",[r,g,b],"srgb",{method:"naive"});return new Couleur([...clampedValues,a])}}}static unblendAll(...colors){if(colors.length<2)throw`You need at least 2 colors to unblend`;const mix=colors.shift();const overlay=colors.shift();const background=Couleur.unblend(mix,overlay);if(colors.length===0)return background;else return Couleur.unblendAll(background,...colors)}unblend(overlayColor,alpha){return Couleur.unblend(this,overlayColor,alpha)}unblendAll(...colors){return Couleur.unblendAll(this,...colors)}static whatToBlend(backgroundColor,mixColor,alphas=[],{ignoreTransparent:ignoreTransparent=false}={}){const background=Couleur.makeInstance(backgroundColor);const mix=Couleur.makeInstance(mixColor);let overlays=[];const calculateSolution=a=>{const r=(mix.r*mix.a-background.r*background.a*(1-a))/a;const g=(mix.g*mix.a-background.g*background.a*(1-a))/a;const b=(mix.b*mix.a-background.b*background.a*(1-a))/a;if(!Couleur.inGamut("srgb",[r,g,b],"srgb",{tolerance:1/255}))throw`This color doesn't exist`;const clampedValues=Couleur.toGamut("srgb",[r,g,b],"srgb",{method:"naive"});return new Couleur([...clampedValues,a])};const requestedAlphas=[alphas].flat();const computedAlphas=requestedAlphas.length>0?requestedAlphas.filter((a=>a>0&&a<1)):Array.from({length:9},((v,k)=>(k+1)/10));if(mix.a<background.a)return null;else if(mix.a>background.a){if(mix.a===1)overlays.push(mix);else if(background.a===0)overlays.push(mix);else{const a=(mix.a-background.a)/(1-background.a);try{overlays.push(calculateSolution(a))}catch(error){return null}}}else if(mix.a===background.a){if(mix.a===0)overlays.push(new Couleur("transparent"));else if(mix.a<1){if(Couleur.same(mix,background))overlays.push(new Couleur("transparent"));else return null}else{if(Couleur.same(mix,background))overlays.push(new Couleur("transparent"));for(const a of computedAlphas){try{overlays.push(calculateSolution(a))}catch(error){continue}}overlays.push(mix)}}let result=requestedAlphas.length>0?overlays.filter((c=>requestedAlphas.includes(c.a))):overlays;if(ignoreTransparent)result=result.filter((a=>a>0));return result.length===0?null:result.length===1?result[0]:result}whatToBlend(mixColor,alphas){return Couleur.whatToBlend(this,mixColor,alphas)}static contrast(textColor,backgroundColor,{method:method="WCAG2"}={}){const background=Couleur.makeInstance(backgroundColor);if(background.a<1)throw`The contrast with a transparent background color would be meaningless`;let text=Couleur.makeInstance(textColor);if(text.a<1)text=Couleur.blend(background,text);switch(method.toLowerCase()){case"wcag3":case"sapc":case"apca":return Contrasts.APCA(text.values,background.values);case"wcag2":default:return Contrasts.WCAG2(text.values,background.values)}}contrast(backgroundColor,options){return Couleur.contrast(this,backgroundColor,options)}bestColorScheme(as="background"){if(as==="text"){const Cblack=Math.abs(Couleur.contrast(this,"black",{method:"apca"}));const Cwhite=Math.abs(Couleur.contrast(this,"white",{method:"apca"}));return Cblack>=Cwhite?"dark":"light"}else{const Cblack=Math.abs(Couleur.contrast("black",this,{method:"apca"}));const Cwhite=Math.abs(Couleur.contrast("white",this,{method:"apca"}));return Cblack>=Cwhite?"light":"dark"}}improveContrast(backgroundColor,desiredContrast,{lower:lower=false,colorScheme:colorScheme=null,method:method="WCAG2"}={}){const background=Couleur.makeInstance(backgroundColor);const backgroundLab=background.valuesTo("lab");const movingLab=this.valuesTo("lab");let startContrast=Couleur.contrast(this,background,method);let directionContrast;if(startContrast>desiredContrast)directionContrast=-1;else if(startContrast<desiredContrast)directionContrast=1;else directionContrast=0;if(directionContrast<0&&lower===false||directionContrast===0)return this;const _colorScheme=colorScheme||(backgroundLab[0]<movingLab[0]?"dark":"light");const cBlack=Couleur.contrast(background,"black",method);const cWhite=Couleur.contrast(background,"white",method);const isPossible={lowering:directionContrast>0?Math.abs(cBlack)>=desiredContrast:Math.abs(cBlack)<=desiredContrast,raising:directionContrast>0?Math.abs(cWhite)>=desiredContrast:Math.abs(cWhite)<=desiredContrast};let directionCIEL;if(isPossible.lowering&&!isPossible.raising)directionCIEL=-1;else if(isPossible.raising&&!isPossible.lowering)directionCIEL=1;else if(!isPossible.raising&&!isPossible.lowering){if(_colorScheme==="light")return new Couleur("black");else return new Couleur("white")}else{if(_colorScheme==="light"&&directionContrast>0)directionCIEL=-1;else if(_colorScheme==="light"&&directionContrast<0)directionCIEL=1;else if(_colorScheme==="dark"&&directionContrast>0)directionCIEL=1;else directionCIEL=-1}const τ=1e-4;let CIELmin=directionCIEL>0?movingLab[0]:0;let CIELmax=directionCIEL>0?1:movingLab[0];while(CIELmax-CIELmin>τ){const ciel=(CIELmin+CIELmax)/2;const newValues=movingLab;newValues[0]=ciel;const newContrast=Couleur.contrast(Couleur.convert("lab","srgb",newValues),background,method);const condition=directionContrast>0?Math.abs(newContrast)<desiredContrast:Math.abs(newContrast)>desiredContrast;if(condition){if(directionCIEL>0)CIELmin=ciel;else CIELmax=ciel}else{if(directionCIEL>0)CIELmax=ciel;else CIELmin=ciel}movingLab[0]=ciel}let result=new Couleur(Couleur.convert("lab","srgb",movingLab));if(Math.abs(Couleur.contrast(result,background,method))<desiredContrast){if(directionCIEL>0)movingLab[0]=CIELmax;else movingLab[0]=CIELmin}return new Couleur(Couleur.convert("lab","srgb",movingLab))}static distance(color1,color2,{method:method="CIEDE2000"}={}){const colore1=Couleur.makeInstance(color1);const colore2=Couleur.makeInstance(color2);const[lab1,lab2]=[colore1,colore2].map((c=>c.valuesTo("lab")));switch(method){case"CIEDE2000":return Distances.CIEDE2000(lab1,lab2);case"euclidean":default:{return lab1.reduce(((sum,v,k)=>sum+(v-lab2[k])**2))}}}distance(color,options){return Couleur.distance(this,color,options)}static same(color1,color2,tolerance=1){if(Couleur.distance(color1,color2)>tolerance)return false;else return true}same(color){return Couleur.same(this,color)}static gradient(startColor,endColor,steps=5,spaceID="lch"){const start=Couleur.makeInstance(startColor);const end=Couleur.makeInstance(endColor);const _steps=Math.max(1,steps);const props=[...Couleur.propertiesOf(spaceID),"a"];const space=Couleur.getSpace(spaceID);const startValues=[...start.valuesTo(space),start.a];const endValues=[...end.valuesTo(space),end.a];const stepList=props.map(((prop,k)=>{let step;switch(prop){case"h":case"cieh":case"okh":const stepUp=((endValues[k]-startValues[k])%360+360)%360;const stepDown=((startValues[k]-endValues[k])%360+360)%360;step=(stepUp<=stepDown?stepUp:-stepDown)/_steps;break;default:step=(endValues[k]-startValues[k])/_steps}return step}));const intermediateColors=[startValues];for(let i=1;i<_steps;i++){let previous=intermediateColors[i-1];let next=props.map(((prop,k)=>{let v=previous[k]+stepList[k];if(["h","cieh"].includes(prop))return Utils.angleToRange(v);else return v}));const a=next[3];next=Couleur.toGamut(space,next.slice(0,3),space);next=[...next,a];intermediateColors.push(next)}return[...intermediateColors.map((c=>new Couleur(Couleur.convert(space,"srgb",c)))),end]}gradient(color,steps,format){return Couleur.gradient(this,color,steps,format)}static propertiesOf(format){switch(format){case"rgb":case"rgba":return["r","g","b"];case"hsl":case"hsla":return["h","s","l"];case"hwb":case"hwba":return["h","w","bk"];case"lab":case"laba":return["ciel","ciea","cieb"];case"lch":case"lcha":return["ciel","ciec","cieh"];case"oklab":return["okl","oka","okb"];case"oklch":return["okl","okc","okh"];default:return[]}}static get properties(){return["a","r","g","b","h","s","l","w","bk","ciel","ciea","cieb","ciec","cieh"]}static get colorSpaces(){return colorSpaces}static getSpace(spaceID){if(typeof spaceID.id==="string")return spaceID;const id=spaceID==="rgb"?"srgb":spaceID==="rgba"?"srgb":spaceID==="hsla"?"hsl":spaceID;return Couleur.colorSpaces.find((sp=>sp.id==id))}static get formats(){return CSSformats}static get couleursNommees(){return namedColors}}class Palette{constructor(hue,generator=(()=>[]),{clampSpace:clampSpace="srgb"}={}){this.colors=[];const colors=generator(hue);for(const color of colors){const nuances=[];for(const lightness of color.lightnesses){let rgb=Couleur.convert("oklch","srgb",[lightness,color.chroma,color.hue]);if(clampSpace!=null)rgb=Couleur.toGamut(clampSpace,rgb);const newColor=new Couleur(`color(srgb ${rgb.join(" ")})`);nuances.push(newColor)}this.colors.push(nuances)}}}export{Conversion,Palette,Couleur as default};
